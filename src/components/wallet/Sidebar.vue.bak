<template>
  <div>
    <div class="flex items-center">
      <div class="relative flex-1">
        <icon classes="absolute w-5 h-5 top-3 left-3 dark:text-gray-300" name="search"></icon>
        <input v-model="keyword" aria-label="Search..." class="form-input px-10 w-full" type="text"/>
        <span v-if="keyword !== ''" class="absolute top-3 right-3 dark:text-gray-400 cursor-pointer"
              @click="keyword = ''">
          <icon classes="w-5 h-5" name="close"></icon>
        </span>
      </div>
      <router-link v-tippy="'Enable / Disable Coins'" class="ml-3" tag="a" to="/account/wallet?popup=true">
        <icon name="cog"></icon>
      </router-link>
    </div>
    <h2 class="mt-3 mb-1">
      <router-link :to="{name: 'wallet'}" aria-expanded="true"
                   class="flex items-center justify-between px-3 py-2 w-full font-semibold text-left border border-gray-200 dark:border-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-800"
                   tag="a">
        <span class="flex items-center">
          <icon classes="w-5 h-5 mr-3" name="bar-chart"></icon>
          <span>{{ translate('dashboard.overview') }}</span>
        </span>
      </router-link>
    </h2>
    <div id="accordion-open" data-accordion="open">
      <template v-for="(list, index) in formattedBalanceList" :key="index">
        <template v-if="list.length > 0" class="mb-1">
          <h2>
            <button
              class="flex items-center justify-between px-3 py-2 w-full font-semibold border border-gray-200 dark:border-gray-700 text-left text-gray-500 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800"
              type="button" @click="toggleSidebarFoldings(index)">
              <span class="flex items-center justify-between w-full">
                {{ createTitle(index) }}
                <span :class="`transform transition-transform ${expanded !== index ? 'rotate-180' : ''}`">
                  <icon name="chevron-down"></icon>
                </span>
              </span>
            </button>
          </h2>
          <div :class="[!(expanded === index || keyword !== '') ? 'max-h-0' : 'max-h-240']"
               class="overflow-hidden transition-max-height duration-500 transform">
            <div class="px-2 py-2 border border-gray-200 dark:border-gray-700">
              <ul style="padding-left: 0;list-style-type: none">
                <li v-for="(balance, i) in list" :key="i">
                  <router-link v-if="balance.online === '1'"
                               :class="`flex items-center hover:bg-gray-200 dark:hover:bg-gray-700 py-1 px-2 cursor-pointer dark:text-gray-300 ${selectedBalance && selectedBalance.id === balance.id ? 'bg-gray-200 dark:bg-gray-700':'' }`"
                               :to="{ name: 'wallet', params: {ln: balance.longname.toString() } }" tag="a">
                    <span class="flex items-center" @click="toggleSidebarFoldings(-1)">
                      <img :src="generateIconUrl(balance.name)" alt class="w-4 h-4 mr-3"/>
                      <span>{{ balance.name }} {{ balance.longname }}</span>
                    </span>
                  </router-link>
                  <a v-if="balance.online === '0'" class="flex items-center">
                    <img :src="generateIconUrl(balance.name)" alt class="w-4 h-4"/>
                    {{ balance.name }} {{ balance.longname }}
                  </a>
                </li>
              </ul>
            </div>
          </div>
        </template>
      </template>
    </div>
  </div>
</template>

<script>
import Icon from '@/components/Icon'
import { useStore } from 'vuex'
import { useRoute } from 'vue-router'
import { computed, inject, onBeforeMount, onBeforeUnmount, reactive, toRefs, watch } from 'vue'
import compositionUtils from '@/compositionUtils'
import * as _ from 'lodash'

export default {
  name: 'Sidebar',
  props: ['balanceList'],
  components: {
    Icon
  },
  setup (props) {
    const translate = inject('translate')
    // Store
    const store = useStore()
    // Route
    const route = useRoute()

    const { generateIconUrl } = compositionUtils()

    const state = reactive({
      keyword: '',
      expanded: null,
      isOverview: true,
      selectedBalance: null,
      isMobileView: false
    })
    // Computed
    const altCoins = computed(() => store.state.altCoins)
    const filteredBalanceList = computed(() => {
      let list = props.balanceList.filter(balance => {
        if (state.keyword) {
          const keyword = state.keyword.trim().toLowerCase()
          return (
            _.includes(balance.name.toLowerCase(), keyword) ||
            _.includes(balance.longname.toLowerCase(), keyword)
          )
        }
        return true
      })
      list = list.map(balance => {
        return {
          ...balance,
          fiatvalue: Number(balance.fiatvalue)
        }
      })
      return _.orderBy(list, 'fiatvalue', 'desc')
    })
    const formattedBalanceList = computed(() => {
      const list = {}
      _.forEach(filteredBalanceList.value, balance => {
        const coin = _.find(altCoins.value, coin => {
          return coin.LongName.toLowerCase() === balance.longname.toLowerCase()
        })
        if (coin) {
          const key = getKey(coin.vFiat)
          if (typeof list[key] === 'undefined') {
            list[key] = []
          }
          list[key].push(balance)
        }
      })
      // eslint-disable-next-line vue/no-side-effects-in-computed-properties
      state.expanded = null
      if (state.keyword) {
        Object.keys(list).forEach(i => {
          if (list[i].length > 0 && !state.isMobileView) {
            // eslint-disable-next-line vue/no-side-effects-in-computed-properties
            state.expanded = i
          }
        })
      }
      if (route.params.ln) {
        Object.keys(list).forEach((key) => {
          const index = _.findIndex(list[key], { longname: route.params.ln })
          if (index !== -1 && !state.isMobileView) {
            state.expanded = key
          }
        })
      }
      return list
    })

    // Watch
    watch(() => ({ ...route }),
      (to, from) => {
        if (to.query.id !== from.query.id) {
          if (to.query.id) {
            state.keyword = to.query.id
          }
        }
        if (to.params.ln) {
          state.selectedBalance = _.find(props.balanceList, { longname: to.params.ln })
        }
      })
    watch(() => _.cloneDeep(props.balanceList),
      (newVal, oldVal) => {
        if (newVal) {
          if (route.params.ln) {
            state.selectedBalance = _.find(props.balanceList, { longname: route.params.ln })
          }
        }
      })

    // Methods
    const getKey = (type) => {
      let key = ''
      switch (type) {
        case 0:
          key = 'crypto_currencies'
          break
        case 1:
          key = 'virtual_fiat'
          break
        case 2:
          key = 'virtual_shares'
          break
        case 3:
          key = 'virtual_commodities'
          break
        case 4:
          key = 'virtual_indices'
          break
        case 5:
          key = 'virtual_bond'
          break
      }
      return key
    }
    const createTitle = (slug) => {
      return slug.replace('_', ' ').replace(/^\w/, c => c.toUpperCase())
    }
    const toggleSidebarFoldings = (i) => {
      if (state.isMobileView) {
        state.expanded = i
      } else {
        state.expanded = state.expanded === i ? -1 : i
      }
    }

    const reCalculate = () => {
      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
        state.isMobileView = true
      }
      if (route.params.ln) {
        state.selectedBalance = _.find(props.balanceList, { longname: route.params.ln })
      }
    }

    onBeforeMount(() => {
      window.addEventListener('resize', reCalculate)
    })

    onBeforeUnmount(() => {
      window.removeEventListener('resize', reCalculate)
    })

    return {
      translate,
      ...toRefs(state),
      formattedBalanceList,
      createTitle,
      generateIconUrl,
      toggleSidebarFoldings
    }
  }
}
</script>

<style lang="scss" scoped>
.active {
  @apply bg-gray-200 dark:bg-gray-700;
}
</style>
